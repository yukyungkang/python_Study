# ✅ 파이썬 함수의 3가지 종류
# 1️⃣ 내장 함수 (Built-in Function)
#    - 파이썬이 기본적으로 제공하는 함수로, 별도의 설정 없이 바로 사용 가능
#    - 예: print(), len(), sum(), max(), min(), range() 등
#
# 2️⃣ 모듈 함수 (Module Function)
#    - 특정 기능을 묶어서 제공하는 모듈 내의 함수
#    - 사용하려면 import 키워드를 사용하여 모듈을 불러와야 함
#    - 예: math.sqrt(), random.randint(), datetime.datetime.now() 등
#
# 3️⃣ 사용자 정의 함수 (User-defined Function)
#    - 사용자가 직접 정의하여 사용하는 함수
#    - def 키워드를 사용하여 생성하고, 필요할 때 호출하여 사용
#    - 예: def my_function(): ...

# ✅ 1. 함수 정의 및 호출 (문자열 출력)
def my_func():
    print("토끼야 안녕!")  # 함수 실행 시 출력될 문장

# 함수 호출
my_func()
# 출력: 토끼야 안녕!


# ✅ 2. 두 개의 숫자를 더하는 함수
def add(num1, num2):
    return num1 + num2  # 두 숫자의 합을 반환

print(add(2, 3))
# 출력: 5


# ✅ 3. 두 개의 숫자를 더하고 곱하는 함수
def add_mul(num1, num2):
    return num1 + num2, num1 * num2  # 더한 값과 곱한 값을 반환

print(add_mul(2, 3))
# 출력: (5, 6) (튜플 형태로 반환됨)

# ✅ 효율적인 판결 함수 만들기
# 하트 여왕을 도와 카드 병사들에게 유죄 판결을 내리는 함수
# 반복되는 코드를 줄이고 효율적으로 사용할 수 있음

def judge_cards(name):
    """입력받은 카드 종류(name)에 대해 1~3 유죄 판결을 출력하는 함수"""

    # 1️⃣ 반복문을 사용하여 중복 제거
    # 기존 방식: print("하트 1 유죄!") 같은 코드를 여러 번 작성해야 했음
    # -> 반복문을 활용하면 자동으로 1~3까지 출력 가능
    for i in range(1, 4):
        print(name, f"{i} 유죄!")  # 카드 이름과 함께 유죄 판결 출력


# 2️⃣ 함수 호출을 통해 간결한 코드 유지
# 기존에는 카드마다 print()를 여러 번 작성해야 했음
# -> 함수 한 번 정의 후 여러 번 호출하여 코드 재사용성 증가

judge_cards("하트")  # "하트" 카드 병사에게 유죄 판결
judge_cards("클로버")  # "클로버" 카드 병사에게 유죄 판결
judge_cards("스페이드")  # "스페이드" 카드 병사에게 유죄 판결

# 3️⃣ 확장성과 유지보수 용이
# 새로운 카드가 추가되더라도 judge_cards("새로운 카드")만 호출하면 되므로 유지보수가 쉬움
# 예: judge_cards("다이아")를 추가하면 "다이아 1~3 유죄!"가 자동으로 출력됨
