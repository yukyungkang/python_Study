#딕셔너리
# 어떤 키가 있고 키네 맞는 값이 있다
#{키1: 값, 키2: 값, 키2: 값}
# 인덱스 대신 키를 쓴다. 키 위치에는 값을 바꿀 수 없는 자료형이다. 값은 뭘 쓸지 상관 없다.
# 빈 딕셔너리 생성
my_dict1 = {}
print(my_dict1)  # {}
# 숫자를 키로 가지는 딕셔너리 생성
my_dict2 = {0: 1, 1: -2, 2: 3.14}
print(my_dict2)  # {0: 1, 1: -2, 2: 3.14}
# 문자열을 키로 가지는 딕셔너리 생성
my_dict3 = {'이름': '앨리스', '나이': 10, '시력': [1.0, 1.2]}
print(my_dict3)  # {'이름': '앨리스', '나이': 10, '시력': [1.0, 1.2]}

#키값 추가하기
# 딕셔너리에서 append라는 메소드가 없다.
# 딕셔너리[추가할 키] = 추가할 값
# 딕셔너리 생성
clover = {'나이': 27, '직업': '병사'}
print(clover)  # {'나이': 27, '직업': '병사'}

# 새로운 키-값 추가
clover['번호'] = 9
print(clover)  # {'나이': 27, '직업': '병사', '번호': 9}

# ✅ 딕셔너리에서 키로 값 접근하기 & get() 메소드 사용하기

# 1. 딕셔너리 값 접근
# 리스트는 인덱스로 값을 가져오지만, 딕셔너리는 키(Key)로 값(Value)에 접근한다.
# 딕셔너리[키]를 사용하여 값을 가져올 수 있음.
# 존재하지 않는 키에 접근하면 오류 발생.

clover = {'나이': 27, '직업': '병사', '번호': 9}

# 키를 사용해 값 가져오기
print(clover['번호'])  # 출력: 9

# 2. 값 변경
# 기존 키에 새로운 값을 할당하면 값이 변경됨.
# 예) 딕셔너리['번호'] = 6 → 기존 값이 6으로 대체됨.

clover['번호'] = 6  # 기존 번호 값을 6으로 변경
print(clover['번호'])  # 출력: 6

# 3. get() 메소드 사용하기
# 딕셔너리.get(키)를 사용하면 키가 존재할 경우 값을 반환.
# 키가 없으면 오류 없이 None을 반환 (기본값 설정 가능).
# 예) 딕셔너리.get('없는 키') → None 반환.

print(clover.get('번호'))  # 출력: 6 (존재하는 키의 값 가져오기)
print(clover.get('주소'))  # 출력: None (없는 키이므로 오류 없이 None 반환)

# get() 메소드에서 기본값 설정 가능
print(clover.get('주소', '정보 없음'))  # 출력: 정보 없음

# 👉 결론: get()을 사용하면 존재하지 않는 키에 접근해도 오류가 발생하지 않으므로, 더 안전하게 값을 가져올 수 있음.


# ✅ 딕셔너리에서 키-값 쌍 제거하기

# 1. 딕셔너리 생성
clover = {'나이': 27, '직업': '병사', '번호': 6}

# 현재 딕셔너리 출력
print(clover)
# 출력: {'나이': 27, '직업': '병사', '번호': 6}

# 2. del 키워드를 사용하여 특정 키-값 삭제
# del 딕셔너리[키] 형식으로 사용
del clover['나이']

# 나이 키가 삭제된 후 딕셔너리 출력
print(clover)
# 출력: {'직업': '병사', '번호': 6}

# 👉 결론: del 키워드를 사용하면 특정 키-값을 제거할 수 있음.
# 존재하지 않는 키를 삭제하려고 하면 오류 발생!
# 예) del clover['주소']  # KeyError 발생!






